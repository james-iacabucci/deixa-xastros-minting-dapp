{"version":3,"sources":["Assets/background4.png","Assets/Logos/Xastro.png","Config/AppConfig.js","Config/CollectionConfig.js","Assets/Logos/DeixaFlat.png","Components/Header/Header.js","Components/CollectionInfo/CollectionInfo.js","Components/MintingControls/MintingControls.js","Assets/background3.png","Components/Utils/StringUtils.js","Components/Nft/index.js","Components/Status/LoadingCollectionInfo.js","Components/Status/NoContractFound.js","Components/Status/NoWalletConnected.js","Components/Status/ProcessingTransaction.js","Components/Status/MessageCard.js","Components/Status/SaleClosed.js","Components/Status/SoldOut.js","Components/Status/SomethingWentWrong.js","Components/Status/TransactionComplete.js","Components/Status/WrongNetwork.js","Components/App/App.js","index.js","Components/Utils/Freelist.js","Components/Utils/Goldlist.js"],"names":["AppConfig","moralisAppId","process","moralisServerUrl","web3AuthClientId","supportChainId","supportChainName","nftContract","isMainnet","CollectionConfig","contractName","contractAddress","openSeaURL","Header","values","userWallet","signOut","setError","isTestNet","processing","setProcessing","nftContractOptions","viewMyAssets","viewHome","useMoralis","isAuthenticated","Moralis","account","chain","useChain","openInNewTab","url","window","open","newState","executeFunction","params","_state","functionName","tx","wait","location","reload","console","error","onBuyETHClick","Plugins","fiat","buy","coin","receiver","disableTriggers","response","data","AppBar","position","elevation","sx","backgroundColor","Toolbar","Link","cursor","onClick","src","logo","alt","style","width","Stack","spacing","direction","alignItems","marginLeft","Chip","variant","color","label","display","xs","md","name","Tooltip","title","substring","toUpperCase","slice","sm","formatted","Button","size","ownerAddress","userAddress","top","bottom","setCollectionPaused","isMintingPaused","withdrawFunds","toLowerCase","CollectionInfo","CardContent","mt","Grid","container","item","Typography","align","saleStage","isReleased","maxSupply","totalSupply","isFreelistMintEnabled","isGoldlistMintEnabled","isUserInFreelist","isUserInGoldlist","nftWallet","length","join","MintingControls","mintAmount","setMintAmount","mintNFT","marginTop","ButtonGroup","fullWidth","Math","max","min","maxMintAmountPerTx","fontSize","fontWeight","Units","FromWei","tokenPrice","toFixed","endIcon","StringUtils","uri","startsWith","replaceAll","Nft","nft","metadata","Card","token_address","token_id","border","borderColor","overflow","maxWidth","CardMedia","component","image","convertIpfsUriToIpfsUrl","Background","bgcolor","py","borderRadius","maxHeight","onError","e","target","onerror","description","LoadingCollectionInfo","textAlign","Box","LinearProgress","NoContractFound","NoWalletConnected","signIn","CardActions","TransactionProcessing","transaction","MessageCard","props","padding","flexDirection","justifyContent","children","SaleClosed","SoldOut","collectionUrl","SomethingWentWrong","message","includes","code","formatErrorMessage","TransactionComplete","acknowledge","WrongNetwork","network","nftContractAbi","require","abi","defaultState","userBalance","networkConfig","BigNumber","from","isPreSaleMintEnabled","nfts","merkleProofManualAddress","merkleProofManualAddressFeedbackMessage","App","useSearchParams","searchParam","useState","get","promotionCode","setValues","setTransaction","contractFound","setContractFound","transactionCompleted","setTransactionCompleted","shouldShowMyAssets","setShowMyAssets","chainId","useNativeBalance","authenticate","logout","isWeb3Enabled","enableWeb3","isWeb3EnableLoading","msgValue","providerId","provider","clientId","appLogo","localStorage","setItem","removeItem","initWallet","log","cost","owner","toNumber","_owner","prevValues","Freelist","contains","Goldlist","amount","promoCode","_mintAmount","_merkleProof","getProofForAddress","_promotionCode","mul","hash","useEffect","getItem","initialize","unsubAccountChanged","onAccountChanged","unsubChainChanged","onChainChanged","isMainNet","isWalletConnected","isSoldOut","Container","disableGutters","undefined","height","backgroundImage","background","p","map","JSON","parse","fixed","raised","XastroLogo","Divider","appTheme","createTheme","palette","mode","primary","main","ReactDOM","render","StrictMode","theme","appId","serverUrl","document","getElementById","this","merkleTree","leafNodes","freelistAddresses","addr","keccak256","MerkleTree","sortPairs","address","getMerkleTree","getHexProof","toString","getLeafIndex","Buffer","goldlistAddresses"],"mappings":"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","file":"static/js/main.4e4ac2d2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background4.75e56f56.png\";","export default __webpack_public_path__ + \"static/media/Xastro.0b4efdea.png\";","const AppConfig = {\n  moralisAppId: process.env.REACT_APP_MORALIS_APPLICATION_ID,\n  moralisServerUrl: process.env.REACT_APP_MORALIS_SERVER_URL,\n  web3AuthClientId: process.env.REACT_APP_WEB3_AUTH_CLIENT_ID,\n  supportChainId: process.env.REACT_APP_SUPPORT_CHAIN_ID_HEX,\n  supportChainName: process.env.REACT_APP_SUPPORT_CHAIN_NAME,\n  nftContract: process.env.REACT_APP_NFT_CONTRACT_ADDRESS,\n  isMainnet: process.env.REACT_APP_MAINNET === '1',\n};\n\nexport default AppConfig;\n","import AppConfig from './AppConfig';\n\nconst CollectionConfig = {\n  contractName: 'DeixaXastroCollection',\n  contractAddress: AppConfig.nftContract,\n  openSeaURL: 'opensea.io/collection/deixa-xastro-origin',\n};\n\nexport default CollectionConfig;\n","export default __webpack_public_path__ + \"static/media/DeixaFlat.9b4ee11a.png\";","import * as React from 'react';\n\nimport AppBar from '@mui/material/AppBar';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\nimport Toolbar from '@mui/material/Toolbar';\nimport Tooltip from '@mui/material/Tooltip';\n\nimport { useChain, useMoralis } from 'react-moralis';\nimport logo from '../../Assets/Logos/DeixaFlat.png';\nimport AppConfig from '../../Config/AppConfig';\n\nexport default function Header({ values, userWallet, signOut, setError, isTestNet, processing, setProcessing, nftContractOptions, viewMyAssets, viewHome }) {\n  const { isAuthenticated, Moralis, account } = useMoralis();\n  const { chain } = useChain();\n\n  function openInNewTab(url) {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  }\n\n  async function setCollectionPaused(newState) {\n    try {\n      const tx = await Moralis.executeFunction({ ...nftContractOptions, params: { _state: newState }, functionName: 'setPaused' });\n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      window.location.reload();\n    } catch (e) {\n      console.error(e);\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  async function withdrawFunds() {\n    try {\n      const tx = await Moralis.executeFunction({ ...nftContractOptions, functionName: 'withdraw' });\n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      window.location.reload();\n    } catch (e) {\n      console.error(e);\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  const onBuyETHClick = async () => {\n    let response = await Moralis.Plugins.fiat.buy(\n      {\n        coin: 'ETH',\n        receiver: account,\n      },\n      {\n        disableTriggers: true,\n      },\n    );\n    window.open(response.data, '_blank');\n  };\n\n  return (\n    <>\n      <AppBar position=\"fixed\" elevation={2} sx={{ backgroundColor: 'black' }}>\n        <Toolbar>\n          <Link sx={{ cursor: 'pointer' }} onClick={() => openInNewTab('https://deixa.io')}>\n            <img src={logo} alt=\"logo\" style={{ width: '125px' }} />\n          </Link>\n          {account && isAuthenticated && (\n            <Stack spacing={1} direction=\"row\" alignItems={'center'} sx={{ marginLeft: 'auto' }}>\n              {viewMyAssets && <Chip variant=\"outlined\" color=\"primary\" label=\"Home\" sx={{ display: { xs: 'none', md: 'flex' } }} onClick={() => viewHome()} />}\n              {viewMyAssets && <Chip variant=\"outlined\" color=\"primary\" label=\"My Assets\" sx={{ display: { xs: 'none', md: 'flex' } }} onClick={() => viewMyAssets()} />}\n              <Chip variant=\"outlined\" color=\"primary\" label=\"Buy ETH\" sx={{ display: { xs: 'none', md: 'flex' } }} onClick={() => onBuyETHClick()} />\n              <Chip variant=\"outlined\" color=\"primary\" label={chain?.name} sx={{ display: { xs: 'none', md: 'flex' } }} />\n              <Tooltip title={account ? account : '...'}>\n                <Chip variant=\"outlined\" color=\"primary\" label={`${account?.substring(0, 4).toUpperCase()}....${account?.slice(-4).toUpperCase()}`} sx={{ display: { xs: 'none', sm: 'flex' } }} />\n              </Tooltip>\n              <Chip variant=\"outlined\" color=\"primary\" label={userWallet?.formatted} sx={{ display: { xs: 'none', sm: 'flex' } }} />\n              {isAuthenticated && (\n                <Button variant=\"contained\" size=\"small\" onClick={() => signOut()}>\n                  Disconnect\n                </Button>\n              )}\n            </Stack>\n          )}\n        </Toolbar>\n      </AppBar>\n\n      {!processing && isAuthenticated && account && values.ownerAddress === values.userAddress && (\n        <AppBar position=\"fixed\" elevation={2} sx={{ top: 'auto', bottom: 0, backgroundColor: 'white' }}>\n          <Toolbar sx={{ backgroundColor: 'white' }}>\n            <Stack spacing={1} direction=\"row\">\n              <Button size=\"small\" variant=\"contained\" sx={{ color: 'white' }} onClick={() => setCollectionPaused(values.isMintingPaused ? false : true)}>\n                {values.isMintingPaused ? 'Resume Minting' : 'Pause Minting'}\n              </Button>\n              <Button size=\"small\" variant=\"contained\" sx={{ color: 'white' }} onClick={() => withdrawFunds()}>\n                Withdraw Funds\n              </Button>\n              <Button\n                size=\"small\"\n                variant=\"contained\"\n                sx={{ color: 'white' }}\n                onClick={() => openInNewTab(`https://${isTestNet() ? `${AppConfig.supportChainName.toLowerCase()}.` : ''}etherscan.io/address/${nftContractOptions.contractAddress}`)}\n              >\n                View Contract\n              </Button>\n              {/* <Button size='small' variant='contained' sx={{ color: 'white'}} onClick={() => setStakingPaused((values.isStakingPaused ? false : true))}>{values.isStakingPaused ? \"Resume Staking\" : \"Pause Staking\"}</Button> */}\n            </Stack>\n          </Toolbar>\n        </AppBar>\n      )}\n    </>\n  );\n}\n","import * as React from 'react';\nimport { CardContent, Typography, Grid } from '@mui/material';\n\nexport default function CollectionInfo({ values }) {\n  return (\n    <CardContent mt={2}>\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <Typography variant=\"body2\">Sale Type</Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n            {`${values.saleStage} ${!values.isReleased ? '(Test)' : ''}`}\n          </Typography>\n        </Grid>\n\n        <Grid item xs={6}>\n          <Typography variant=\"body2\">Sale Status</Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n            {values.maxSupply === values.totalSupply\n              ? 'Sold Out'\n              : values.isMintingPaused\n              ? 'Closed'\n              : !(values.isFreelistMintEnabled || values.isGoldlistMintEnabled)\n              ? 'Open'\n              : (values.isFreelistMintEnabled && values.isUserInFreelist) || (values.isGoldlistMintEnabled && values.isUserInGoldlist)\n              ? 'Approved'\n              : 'Not Approved'}\n          </Typography>\n        </Grid>\n\n        <Grid item xs={6}>\n          <Typography variant=\"body2\">Minting Status</Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n            {`${values.totalSupply} of ${values.maxSupply}`}\n          </Typography>\n        </Grid>\n\n        <Grid item xs={6}>\n          <Typography variant=\"body2\">Xastro NFTs Owned</Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography variant=\"body2\" align=\"right\" color=\"primary\">\n            {values.nftWallet?.length ? '#' + values.nftWallet?.join(', #') : 'Your Wallet is Empty'}\n          </Typography>\n        </Grid>\n      </Grid>\n    </CardContent>\n  );\n}\n","import * as React from 'react';\nimport { CardContent, Typography, Button, Grid, ButtonGroup } from '@mui/material';\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\nimport { useMoralis } from 'react-moralis';\n\nexport default function MintingControls({ values, mintAmount, setMintAmount, mintNFT }) {\n  const { Moralis } = useMoralis();\n  const incrementMintAmount = () => setMintAmount(Math.min(values.maxMintAmountPerTx, mintAmount + 1));\n  const decrementMintAmount = () => setMintAmount(Math.max(1, mintAmount - 1));\n  const mintCost = () => Moralis.Units.FromWei(values.tokenPrice, 18) * mintAmount;\n\n  return (\n    <CardContent sx={{ marginTop: '8px' }}>\n      <Grid container spacing={2}>\n        <Grid item xs={4}>\n          <ButtonGroup variant=\"contained\">\n            <Button variant=\"contained\" sx={{ color: 'white' }} fullWidth onClick={() => decrementMintAmount()}>\n              -\n            </Button>\n            <Button variant=\"contained\" sx={{ color: 'white' }} fullWidth>{`${mintAmount}`}</Button>\n            <Button variant=\"contained\" sx={{ color: 'white' }} fullWidth onClick={() => incrementMintAmount()}>\n              +\n            </Button>\n          </ButtonGroup>\n        </Grid>\n        <Grid item xs={4}>\n          <Typography mt={0.5} variant=\"body2\" align=\"center\" fontSize={'1rem'} fontWeight={'bold'} color=\"primary\">\n            {`${mintCost().toFixed(3)} ETH`}\n          </Typography>\n          <Typography mt={-0.5} align=\"center\" fontSize={10}>\n            (plus gas)\n          </Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <Button fullWidth variant=\"contained\" sx={{ color: 'white' }} onClick={() => mintNFT(mintAmount)} endIcon={<ArrowForwardIcon />}>\n            Mint\n          </Button>\n        </Grid>\n      </Grid>\n    </CardContent>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/background3.7767b560.png\";","export default class StringUtils {\n  static convertIpfsUriToIpfsUrl(uri) {\n    if (uri.startsWith('ipfs://ipfs/')) {\n      return `https://ipfs.io/ipfs/${uri.replaceAll('ipfs://ipfs/', '')}`;\n    } else if (uri.startsWith('ipfs://')) {\n      return `https://ipfs.io/ipfs/${uri.replaceAll('ipfs://', '')}`;\n    } else {\n      return uri;\n    }\n  }\n}\n","import { Card, CardContent, CardMedia, Grid, Typography } from '@mui/material';\nimport * as React from 'react';\nimport Background from '../../Assets/background3.png';\nimport AppConfig from '../../Config/AppConfig';\nimport StringUtils from '../Utils/StringUtils';\n\nexport default function Nft({ nft, metadata, isTestNet }) {\n  const handleImageError = (e) => {\n    e.target.onerror = null;\n    e.target.src = Background;\n  };\n  const openInNewTab = (url) => window.open(url, '_blank', 'noopener,noreferrer');\n  return (\n    <Card\n      onClick={() => {\n        openInNewTab(`https://${isTestNet() ? `${AppConfig.supportChainName.toLowerCase()}.` : ''}etherscan.io/token/${nft.token_address}?a=${nft.token_id}`);\n      }}\n      elevation={20}\n      sx={{ border: 3, borderColor: 'white', overflow: 'visible', maxWidth: '200' }}\n    >\n      <CardMedia\n        component=\"img\"\n        image={metadata ? StringUtils.convertIpfsUriToIpfsUrl(metadata.image) : Background}\n        sx={{ bgcolor: 'black', py: 2, borderRadius: '4px 4px 0 0', maxHeight: '200', maxWidth: '200' }}\n        onError={handleImageError}\n      />\n      <CardContent mt={2}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Typography variant=\"body1\" color=\"primary\">\n              {metadata ? metadata.name : nft.name}\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"body2\">{metadata ? metadata.description : nft.token_id}</Typography>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n}\n","import * as React from 'react';\nimport { Stack, CardContent, Box, LinearProgress, Typography } from '@mui/material';\n\nexport default function LoadingCollectionInfo() {\n  return (\n    <CardContent mt={2}>\n      <Stack spacing={2}>\n        <Typography variant=\"body2\" textAlign={'center'}>\n          Loading NFT Collection Information...\n        </Typography>\n        <Box sx={{ width: '100%' }}>\n          <LinearProgress />\n        </Box>\n      </Stack>\n    </CardContent>\n  );\n}\n","import * as React from 'react';\nimport { Stack, CardContent, Typography } from '@mui/material';\n\nexport default function NoContractFound() {\n  return (\n    <CardContent mt={2}>\n      <Stack spacing={2}>\n        <Typography variant=\"body2\" textAlign={'center'}>\n          Something went wrong!\n        </Typography>\n        <Typography variant=\"body2\" textAlign={'center'}>\n          The NFT smart contract could not be found.\n        </Typography>\n        <Typography variant=\"body2\" textAlign={'center'}>\n          Please make sure your wallet is connected to the Ethereum MainNet.\n        </Typography>\n      </Stack>\n    </CardContent>\n  );\n}\n","import { Button, CardActions, CardContent, Typography } from '@mui/material';\nimport * as React from 'react';\n\nexport default function NoWalletConnected({ signIn }) {\n  return (\n    <>\n      <CardContent mt={2}>\n        <Typography variant=\"body2\" align=\"center\">\n          Please connect your Ethereum wallet to continue.\n        </Typography>\n      </CardContent>\n      <CardActions>\n        (typeof window.ethereum !== 'undefined') && (\n        <Button fullWidth sx={{ color: 'white' }} variant=\"contained\" onClick={() => signIn('metamask')}>\n          Metamask\n        </Button>\n        )\n        <Button fullWidth sx={{ color: 'white' }} variant=\"contained\" onClick={() => signIn('walletconnect')}>\n          WalletConnect\n        </Button>\n      </CardActions>\n      <CardActions>\n        <Button fullWidth sx={{ color: 'white' }} variant=\"contained\" onClick={() => signIn('web3Auth')}>\n          Create Deixa Wallet\n        </Button>\n      </CardActions>\n    </>\n  );\n}\n","import * as React from 'react';\nimport { Stack, CardContent, Typography, Chip, Button, Box, LinearProgress } from '@mui/material';\nimport AppConfig from '../../Config/AppConfig';\n\nexport default function TransactionProcessing({ transaction, isTestNet }) {\n  const openInNewTab = (url) => window.open(url, '_blank', 'noopener,noreferrer');\n\n  return (\n    <CardContent mt={2}>\n      <Stack spacing={2}>\n        <Typography variant=\"h5\" color=\"primary\" fontWeight=\"bold\" align=\"center\">\n          Processing Your Transaction\n        </Typography>\n        <Typography variant=\"body2\" textAlign={'center'}>\n          Your transaction has been submitted to the Ethereum Network and is waiting to be confirmed!\n        </Typography>\n        <Typography variant=\"body2\" textAlign={'center'}>\n          Your screen will automatically be refreshed when the transaction is completed. This may take up to 5 minutes to complete, so please be patient.\n        </Typography>\n        <Chip sx={{ fontSize: 9 }} label={transaction} />\n        <Button\n          variant=\"contained\"\n          sx={{ color: 'white' }}\n          fullWidth\n          size=\"small\"\n          onClick={() => openInNewTab(`https://${isTestNet() ? `${AppConfig.supportChainName.toLowerCase()}.` : ''}etherscan.io/tx/${transaction}`)}\n        >\n          View your transaction on EtherScan\n        </Button>\n        <Box mt={2} sx={{ width: '100%' }}>\n          <LinearProgress />\n        </Box>\n      </Stack>\n    </CardContent>\n  );\n}\n","import * as React from 'react';\nimport { Card } from '@mui/material';\n\nexport default function MessageCard(props) {\n  return (\n    <Card\n      sx={{\n        position: 'relative',\n        display: 'flex',\n        padding: '1em',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        backgroundColor: props.backgroundColor ? props.backgroundColor : 'black',\n        alignItems: 'center',\n      }}\n    >\n      {props.children}\n    </Card>\n  );\n}\n","import * as React from 'react';\nimport { Typography } from '@mui/material';\nimport MessageCard from './MessageCard';\n\nexport default function SaleClosed() {\n  return (\n    <MessageCard>\n      <Typography variant=\"body2\" color=\"primary\" align=\"center\">\n        This sale is closed. Please come back for our next sale!\n      </Typography>\n    </MessageCard>\n  );\n}\n","import * as React from 'react';\nimport { Typography, Button } from '@mui/material';\nimport MessageCard from './MessageCard';\n\nexport default function SoldOut({ isTestNet, collectionUrl }) {\n  const openInNewTab = (url) => window.open(url, '_blank', 'noopener,noreferrer');\n\n  return (\n    <MessageCard>\n      <Typography variant=\"body2\" color=\"primary\" align=\"center\">\n        Thank you for your support!\n      </Typography>\n      <Typography variant=\"body2\" color=\"primary\" align=\"center\">\n        Our current sale is sold out, but please come back for our next sale!\n      </Typography>\n      <Button variant=\"contained\" fullWidth sx={{ mt: 2 }} onClick={() => openInNewTab(`https://${isTestNet() ? 'testnets.' : ''}${collectionUrl}`)}>\n        Buy Deixa Xastro Origin on OpenSea\n      </Button>\n    </MessageCard>\n  );\n}\n","import { Button, CardActions, CardContent, Stack, Typography } from '@mui/material';\nimport * as React from 'react';\nimport { useMoralis } from 'react-moralis';\n\nexport default function SomethingWentWrong({ error, setError }) {\n  const { account, Moralis } = useMoralis();\n\n  function formatErrorMessage(error) {\n    if (error.message.includes('This is an invalid')) return 'Your wallet address is not on the approved list.';\n    if (error.message.includes('Your address has already claimed')) return `Your wallet address has already claimed an NFT for this stage of the sale.`;\n    if (error.message.includes('This purchase exceeds')) return 'Your purchase cannot be completed. It exceeds the maximum number of NFTs for this sale.';\n\n    switch (error.code) {\n      case 'INSUFFICIENT_FUNDS':\n        return 'Your wallet does not have enough ETH to complete this purchase.';\n      case 4001:\n        return 'This transaction has been canceled at your request.';\n      case 32603:\n        return error.message;\n      default:\n        return `An error has occurred while processing your transaction (${error.message})`;\n    }\n  }\n\n  const onBuyETHClick = async () => {\n    let response = await Moralis.Plugins.fiat.buy(\n      {\n        coin: 'ETH',\n        receiver: account,\n      },\n      {\n        disableTriggers: true,\n      },\n    );\n    window.open(response.data, '_blank');\n  };\n\n  return (\n    <>\n      <CardContent mt={2}>\n        <Stack spacing={2}>\n          <Typography variant=\"h5\" color=\"primary\" fontWeight=\"bold\" align=\"center\">\n            Something Went Wrong!\n          </Typography>\n          <Typography variant=\"body2\" align=\"center\">\n            {formatErrorMessage(error)}\n          </Typography>\n        </Stack>\n      </CardContent>\n      <CardActions>\n        {error.code === 'INSUFFICIENT_FUNDS' ? (\n          <Button\n            fullWidth\n            sx={{ color: 'white' }}\n            variant=\"contained\"\n            onClick={async () => {\n              await onBuyETHClick();\n              setError(null);\n            }}\n          >\n            Buy ETH\n          </Button>\n        ) : (\n          <Button fullWidth sx={{ color: 'white' }} variant=\"contained\" onClick={() => setError(null)}>\n            OK\n          </Button>\n        )}\n      </CardActions>\n    </>\n  );\n}\n","import * as React from 'react';\nimport { Stack, CardContent, Typography, Button, Chip } from '@mui/material';\nimport ConfettiExplosion from 'react-confetti-explosion';\nimport AppConfig from '../../Config/AppConfig';\n\nexport default function TransactionComplete({ transaction, acknowledge, isTestNet }) {\n  const openInNewTab = (url) => window.open(url, '_blank', 'noopener,noreferrer');\n\n  return (\n    <CardContent mt={2} sx={{ overflow: 'visible' }}>\n      <ConfettiExplosion />\n      <Stack spacing={2}>\n        <Typography variant=\"h5\" color=\"primary\" fontWeight=\"bold\" align=\"center\">\n          Congratulations!\n        </Typography>\n        <Typography variant=\"body2\" textAlign={'center'}>\n          You transaction has been confirmed!\n        </Typography>\n        <Chip variant=\"outlined\" sx={{ fontSize: 9 }} label={transaction} />\n        <Button variant=\"outlined\" fullWidth size=\"small\" onClick={() => openInNewTab(`https://${isTestNet() ? `${AppConfig.supportChainName.toLowerCase()}.` : ''}etherscan.io/tx/${transaction}`)}>\n          View your transaction on EtherScan\n        </Button>\n        <Button fullWidth sx={{ color: 'white' }} variant=\"contained\" onClick={() => acknowledge()}>\n          OK\n        </Button>\n      </Stack>\n    </CardContent>\n  );\n}\n","import * as React from 'react';\nimport { Typography } from '@mui/material';\nimport MessageCard from './MessageCard';\n\nexport default function WrongNetwork({ network }) {\n  return (\n    <MessageCard>\n      <Typography variant=\"body2\" color=\"orange\" align=\"center\">\n        {`You are not connected to the ${network}`}\n      </Typography>\n      <Typography variant=\"body2\" color=\"orange\" align=\"center\">\n        Please connect to continue...\n      </Typography>\n    </MessageCard>\n  );\n}\n","// REACT LIBRARIES\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\n// UI LIBRARIES\nimport { Card, CardMedia, Container, Divider, Grid, Stack } from '@mui/material';\n\n// WEB3 LIBRARIES\nimport { BigNumber } from 'ethers';\nimport { useChain, useMoralis, useNativeBalance } from 'react-moralis';\n\n// DAPP ASSETS\nimport background from '../../Assets/background4.png';\nimport XastroLogo from '../../Assets/Logos/Xastro.png';\nimport CollectionConfig from '../../Config/CollectionConfig';\nimport Freelist from '../Utils/Freelist';\nimport Goldlist from '../Utils/Goldlist';\nimport Header from './../Header/Header';\n\n// DAPP COMPONENTS\nimport logo from '../../Assets/Logos/DeixaFlat.png';\nimport AppConfig from '../../Config/AppConfig';\nimport CollectionInfo from '../CollectionInfo/CollectionInfo';\nimport MintingControls from '../MintingControls/MintingControls';\nimport Nft from '../Nft';\nimport LoadingCollectionInfo from '../Status/LoadingCollectionInfo';\nimport NoContractFond from '../Status/NoContractFound';\nimport NoWalletConnected from '../Status/NoWalletConnected';\nimport ProcessingTransaction from '../Status/ProcessingTransaction';\nimport SaleClosed from '../Status/SaleClosed';\nimport SoldOut from '../Status/SoldOut';\nimport SomethingWentWrong from '../Status/SomethingWentWrong';\nimport TransactionComplete from '../Status/TransactionComplete';\nimport WrongNetwork from '../Status/WrongNetwork';\n\nconst nftContractAbi = require('../../Config/DeixaXastroCollection.json').abi;\n\nconst defaultState = {\n  userAddress: null,\n  userBalance: 0,\n  ownerAddress: null,\n  network: null,\n  networkConfig: null,\n  totalSupply: 0,\n  maxSupply: 0,\n  maxMintAmountPerTx: 0,\n  tokenPrice: BigNumber.from(0),\n  isMintingPaused: null,\n  isFreelistMintEnabled: false,\n  isGoldlistMintEnabled: false,\n  isPreSaleMintEnabled: false,\n  isUserInFreelist: false,\n  isUserInGoldlist: false,\n  nftWallet: [],\n  nfts: [],\n  isReleased: false,\n  saleStage: null,\n  merkleProofManualAddress: '',\n  merkleProofManualAddressFeedbackMessage: null,\n};\n\nfunction App() {\n  const [searchParam, setSearchParam] = useSearchParams();\n  const [promotionCode, setPromotionCode] = useState(searchParam.get('promo'));\n\n  const [error, setError] = useState('');\n  const [mintAmount, setMintAmount] = useState(1);\n  const [values, setValues] = useState(defaultState);\n  const [processing, setProcessing] = useState(false);\n  const [transaction, setTransaction] = useState(null);\n  const [contractFound, setContractFound] = useState(false);\n  const [transactionCompleted, setTransactionCompleted] = useState(false);\n  const [shouldShowMyAssets, setShowMyAssets] = useState(false);\n\n  const { chainId } = useChain();\n  const { data: userWallet } = useNativeBalance();\n  const { authenticate, logout, isWeb3Enabled, enableWeb3, isAuthenticated, isWeb3EnableLoading, account, chain, Moralis } = useMoralis();\n\n  let nftContractOptions = {\n    contractAddress: CollectionConfig.contractAddress,\n    abi: nftContractAbi,\n    functionName: null,\n    msgValue: 0,\n  };\n\n  // DEBUG WATCHERS\n  useEffect(() => {\n    console.log('Web3Enabled', isWeb3Enabled);\n  }, [isWeb3Enabled]);\n\n  useEffect(() => {\n    console.log('Authenticated', isAuthenticated);\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    console.log('Promo Code:', promotionCode);\n  }, [promotionCode]);\n\n  useEffect(() => {\n    console.log('Values:', values);\n  }, [values]);\n\n  // AUTHENTICATION\n  async function signIn(providerId) {\n    providerId === 'web3Auth'\n      ? await authenticate({ provider: providerId, clientId: AppConfig.web3AuthClientId, chainId: AppConfig.supportChainId, appLogo: logo })\n      : await authenticate({ provider: providerId });\n    await enableWeb3({ provider: providerId });\n    localStorage.setItem('local_provider', providerId);\n  }\n\n  async function signOut() {\n    await logout();\n    localStorage.removeItem('local_provider');\n    setShowMyAssets(false);\n    setError('');\n    setValues(() => defaultState);\n  }\n\n  // INITIALIZATION\n  useEffect(() => {\n    async function initialize() {\n      if (isAuthenticated && !isWeb3Enabled && !isWeb3EnableLoading) {\n        const providerId = localStorage.getItem('local_provider');\n        providerId === 'web3Auth'\n          ? await enableWeb3({ provider: localStorage.getItem('local_provider'), clientId: AppConfig.web3AuthClientId, chainId: AppConfig.supportChainId })\n          : await enableWeb3({ provider: localStorage.getItem('local_provider') });\n      }\n      if (isAuthenticated && isWeb3Enabled) {\n        await initWallet();\n      }\n    }\n    initialize();\n\n    const unsubAccountChanged = Moralis.onAccountChanged(function (account) {\n      console.log('Detected an Account Change:', account);\n      window.location.reload();\n    });\n\n    const unsubChainChanged = Moralis.onChainChanged(function (chain) {\n      console.log('Detected a Chain Change:', chain);\n      window.location.reload();\n    });\n\n    return () => {\n      unsubAccountChanged();\n      unsubChainChanged();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAuthenticated, isWeb3Enabled, account, chain]);\n\n  async function initWallet() {\n    console.log('Initializing Wallet...');\n    setProcessing(true);\n    setValues(() => defaultState);\n\n    if (!account) {\n      console.log('initWallet: account is null. exiting...');\n      return;\n    }\n\n    let cost = 0;\n    let owner = null;\n    let maxSupply = 0;\n    let totalSupply = 0;\n    let nftWallet = null;\n    let isReleased = false;\n    let maxMintAmountPerTx = 0;\n    let isMintingPaused = true;\n    let isFreelistMintEnabled = false;\n    let isGoldlistMintEnabled = false;\n    let isPreSaleMintEnabled = false;\n    let nfts = null;\n\n    // COLLECTION PROPERTIES\n    try {\n      owner = await Moralis.executeFunction({ ...nftContractOptions, functionName: 'owner' });\n      maxSupply = (await Moralis.executeFunction({ ...nftContractOptions, functionName: 'maxSupply' }))?.toNumber();\n      totalSupply = (await Moralis.executeFunction({ ...nftContractOptions, functionName: 'totalSupply' }))?.toNumber();\n      maxMintAmountPerTx = (await Moralis.executeFunction({ ...nftContractOptions, functionName: 'maxMintAmountPerTx' }))?.toNumber();\n      cost = await Moralis.executeFunction({ ...nftContractOptions, functionName: 'cost' });\n      isMintingPaused = await Moralis.executeFunction({ ...nftContractOptions, functionName: 'paused' });\n      isFreelistMintEnabled = await Moralis.executeFunction({ ...nftContractOptions, functionName: 'freeListMintEnabled' });\n      isGoldlistMintEnabled = await Moralis.executeFunction({ ...nftContractOptions, functionName: 'goldListMintEnabled' });\n      isPreSaleMintEnabled = await Moralis.executeFunction({ ...nftContractOptions, functionName: 'preSaleMintEnabled' });\n      isReleased = await Moralis.executeFunction({ ...nftContractOptions, functionName: 'released' });\n      nftWallet = await Moralis.executeFunction({ ...nftContractOptions, params: { _owner: account }, functionName: 'walletOfOwner' });\n\n      /*nfts = await Moralis.Web3API.account\n        .getNFTsForContract({\n          chain: AppConfig.supportChainId,\n          address: account,\n          token_address: CollectionConfig.contractAddress,\n        })\n        .then((response) => response && response.result)\n        .catch((_) => []);\n      console.log(nfts);\n      */\n    } catch (e) {\n      console.error(e);\n      setContractFound(false);\n      setProcessing(false);\n      return;\n    }\n\n    setValues((prevValues) => ({\n      ...prevValues,\n      userAddress: account.toUpperCase(),\n      ownerAddress: owner.toUpperCase(),\n      maxSupply: maxSupply,\n      totalSupply: totalSupply,\n      maxMintAmountPerTx: maxMintAmountPerTx,\n      tokenPrice: cost,\n      isMintingPaused: isMintingPaused,\n      saleStage: isFreelistMintEnabled ? 'Free List Only' : isGoldlistMintEnabled ? 'Founder List Only' : isPreSaleMintEnabled ? 'First Release' : 'Second Release',\n      isFreelistMintEnabled: isFreelistMintEnabled,\n      isGoldlistMintEnabled: isGoldlistMintEnabled,\n      isPreSaleMintEnabled: isPreSaleMintEnabled,\n      isUserInFreelist: Freelist.contains(account ?? ''),\n      isUserInGoldlist: Goldlist.contains(account ?? ''),\n      isReleased: isReleased,\n      nftWallet: nftWallet,\n      nfts: nfts,\n    }));\n\n    setContractFound(true);\n    setProcessing(false);\n  }\n\n  // COLLECTION FUNCTIONS\n\n  async function mintNFT(amount) {\n    let tx;\n    const promoCode = promotionCode ? promotionCode : 'deixa';\n\n    try {\n      values.isFreelistMintEnabled\n        ? (tx = await Moralis.executeFunction({\n            ...nftContractOptions,\n            params: { _mintAmount: amount, _merkleProof: Freelist.getProofForAddress(account), _promotionCode: 'deixa' },\n            msgValue: values.tokenPrice.mul(amount),\n            functionName: 'freeListMint',\n          }))\n        : values.isGoldlistMintEnabled\n        ? (tx = await Moralis.executeFunction({\n            ...nftContractOptions,\n            params: { _mintAmount: amount, _merkleProof: Goldlist.getProofForAddress(account), _promotionCode: promoCode },\n            msgValue: values.tokenPrice.mul(amount),\n            functionName: 'goldListMint',\n          }))\n        : (tx = await Moralis.executeFunction({\n            ...nftContractOptions,\n            params: { _mintAmount: amount, _promotionCode: promoCode },\n            msgValue: values.tokenPrice.mul(amount),\n            functionName: 'mint',\n          }));\n\n      setTransaction(tx.hash);\n      setTransactionCompleted(false);\n      setProcessing(true);\n      await tx.wait();\n      setProcessing(false);\n      setTransactionCompleted(true);\n    } catch (e) {\n      console.error(e);\n      setError(e);\n      setProcessing(false);\n    }\n  }\n\n  async function acknowledgeTransaction() {\n    setTransaction(null);\n    setTransactionCompleted(false);\n    await initWallet();\n  }\n\n  function viewMyAssets() {\n    if (shouldShowMyAssets) return;\n    setShowMyAssets(true);\n  }\n\n  const isMainNet = () => AppConfig.isMainnet;\n  const isTestNet = () => !AppConfig.isMainnet;\n  const isWalletConnected = () => account !== null && isAuthenticated;\n  const isSoldOut = () => values.maxSupply !== 0 && values.totalSupply >= values.maxSupply;\n  const isPurchaseEnabled = () => isWalletConnected() && !isSoldOut() && !values.isMintingPaused && contractFound && ((values.isReleased && isMainNet()) || (!values.isReleased && !isMainNet()));\n\n  const showNoWalletConnected = () => !processing && !isWalletConnected();\n  const showContractNotFound = () => !processing && isWalletConnected() && !contractFound;\n  const showSomethingWentWrong = () => !processing && error;\n  const showLoadingCollectionInfo = () => processing && !transaction;\n  const showProcessingTransaction = () => processing && transaction && !transactionCompleted;\n  const showTransactionComplete = () => !processing && transactionCompleted;\n  const showCollectionInfo = () => !processing && isWalletConnected() && contractFound && !error && !transactionCompleted;\n  const showMintingControls = () => !processing && isPurchaseEnabled() && !error && !transactionCompleted;\n  const showSaleClosed = () => !processing && values.isMintingPaused && contractFound;\n  const showSoldOut = () => !processing && isSoldOut() && contractFound;\n  const showNotOnMainNet = () => !processing && !values.isReleased && isMainNet();\n  const showNotOnTestNet = () => !processing && values.isReleased && !isMainNet();\n\n  return (\n    <Container disableGutters maxWidth=\"false\">\n      <Header\n        values={values}\n        signOut={signOut}\n        userWallet={userWallet}\n        isTestNet={isTestNet}\n        setError={setError}\n        processing={processing}\n        setProcessing={setProcessing}\n        nftContractOptions={nftContractOptions}\n        viewMyAssets={values.nfts && values.nfts.length > 0 ? viewMyAssets : undefined}\n        viewHome={() => {\n          if (!shouldShowMyAssets) return;\n          setShowMyAssets(false);\n        }}\n      />\n      <div\n        style={{\n          position: 'relative',\n          height: '100vh',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundImage: `url(${background})`,\n        }}\n      >\n        {!shouldShowMyAssets ? (\n          <Container fixed={true} maxWidth=\"xs\">\n            <Stack spacing={2} sx={{ overflow: 'visible' }}>\n              {/* MAIN COLLECTION UX */}\n\n              <Card raised={true} elevation={20} sx={{ border: 3, borderColor: 'white', overflow: 'visible' }}>\n                <CardMedia component=\"img\" image={XastroLogo} alt=\"DEIXA Xastro\" sx={{ bgcolor: 'black', py: 2, borderRadius: '4px 4px 0 0' }} />\n\n                {showNoWalletConnected() && <NoWalletConnected signIn={signIn} />}\n\n                {showContractNotFound() && <NoContractFond />}\n\n                {showSomethingWentWrong() && <SomethingWentWrong error={error} setError={setError} />}\n\n                {showLoadingCollectionInfo() && <LoadingCollectionInfo />}\n\n                {showProcessingTransaction() && <ProcessingTransaction transaction={transaction} isTestNet={isTestNet} />}\n\n                {showTransactionComplete() && <TransactionComplete transaction={transaction} acknowledge={acknowledgeTransaction} isTestNet={isTestNet} />}\n\n                {showCollectionInfo() && <CollectionInfo values={values} />}\n\n                <Divider />\n\n                {showMintingControls() && <MintingControls values={values} mintAmount={mintAmount} setMintAmount={setMintAmount} mintNFT={mintNFT} />}\n              </Card>\n\n              {/* ADDITIONAL INFO CARDS FOR VARIOUS CONDITIONS */}\n\n              {!shouldShowMyAssets && showSaleClosed() && <SaleClosed />}\n\n              {!shouldShowMyAssets && showSoldOut() && <SoldOut isTestNet={isTestNet} collectionUrl={CollectionConfig.openSeaURL} />}\n\n              {showNotOnMainNet() && <WrongNetwork network={'Ethereum TestNet'} />}\n\n              {showNotOnTestNet() && <WrongNetwork network={'Ethereum MainNet'} />}\n            </Stack>\n          </Container>\n        ) : (\n          <Card sx={{ maxWidth: '90%', maxHeight: '69%', overflow: 'scroll', p: 4 }}>\n            <Grid container spacing={4}>\n              {values.nfts.map((nft) => (\n                <Grid key={nft.token_id} item xs={3}>\n                  <Nft nft={nft} metadata={nft.metadata && JSON.parse(nft.metadata)} isTestNet={isTestNet} />\n                </Grid>\n              ))}\n            </Grid>\n          </Card>\n        )}\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@emotion/react';\nimport { createTheme } from '@mui/material/styles';\nimport { MoralisProvider } from 'react-moralis';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './Components/App/App';\nimport './index.css';\nimport AppConfig from './Config/AppConfig';\n\nconst appTheme = createTheme({\n  palette: {\n    mode: 'light',\n    primary: {\n      main: '#587efc',\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={appTheme}>\n      <MoralisProvider appId={AppConfig.moralisAppId} serverUrl={AppConfig.moralisServerUrl}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </MoralisProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import freelistAddresses from '../../Config/freelist.json';\nimport { MerkleTree } from 'merkletreejs';\nimport keccak256 from 'keccak256';\n\nexport default new (class Freelist {\n  merkleTree;\n\n  getMerkleTree() {\n    if (this.merkleTree === undefined) {\n      const leafNodes = freelistAddresses.map((addr) => keccak256(addr));\n      this.merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true });\n    }\n    return this.merkleTree;\n  }\n\n  getProofForAddress(address) {\n    return this.getMerkleTree().getHexProof(keccak256(address));\n  }\n\n  getRawProofForAddress(address) {\n    return this.getProofForAddress(address).toString().replaceAll(\"'\", '').replaceAll(' ', '');\n  }\n\n  contains(address) {\n    return this.getMerkleTree().getLeafIndex(Buffer.from(keccak256(address))) >= 0;\n  }\n})();\n","import goldlistAddresses from '../../Config/goldlist.json';\nimport { MerkleTree } from 'merkletreejs';\nimport keccak256 from 'keccak256';\n\nexport default new (class Goldlist {\n  merkleTree;\n\n  getMerkleTree() {\n    if (this.merkleTree === undefined) {\n      const leafNodes = goldlistAddresses.map((addr) => keccak256(addr));\n      this.merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true });\n    }\n    return this.merkleTree;\n  }\n\n  getProofForAddress(address) {\n    return this.getMerkleTree().getHexProof(keccak256(address));\n  }\n\n  getRawProofForAddress(address) {\n    return this.getProofForAddress(address).toString().replaceAll(\"'\", '').replaceAll(' ', '');\n  }\n\n  contains(address) {\n    return this.getMerkleTree().getLeafIndex(Buffer.from(keccak256(address))) >= 0;\n  }\n})();\n"],"sourceRoot":""}